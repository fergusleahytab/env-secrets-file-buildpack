#!/usr/bin/env bash

# match title indentation
indent () {
    sed -u 's/^/       /'
}

# can override SECRETS_DIR, SECRETS_DECODE
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
SECRETS_DIR=${SECRETS_DIR:-".secrets"}

SECRETS_PATH="$BUILD_DIR/$SECRETS_DIR"
SECRETS_DECODE=${SECRETS_DECODE:-"base64 --decode"}


acceptlist_regex=${SECRET_MATCHER:-'^SECRET_FILE_(.*)'}

# reformat secret key to pathname
sed_remove_prefix="s/SECRET_FILE_//g;"
sed_convert_path="s/__/\//g;" # __ -> /
sed_lowercase="s/.*/\L&/;"
sed_format_ext="s/_\([a-z]*$\)/.\L\1/Ig" # _PEM -> .pem
sed_formatter=$sed_remove_prefix$sed_convert_path$sed_lowercase$sed_format_ext

if [ -d "$ENV_DIR" ]; then
    echo "-----> secret-file-buildpack: saving env secrets to files  ($SECRETS_PATH)"
    mkdir -p $SECRETS_PATH
    saved=0
    for env_key in $(ls $ENV_DIR); do
        # find keys matching acceptlist
        if echo "$env_key" | grep -qE "$acceptlist_regex"; then
            # convert env key to pathname
            file_path=$(echo "$env_key" | sed -e $sed_formatter)
            echo "> $env_key -> $file_path" | indent
            # create folder path
            mkdir -p "$SECRETS_PATH/$(dirname $file_path)"
            # decode env file into new path
            cat $ENV_DIR/$env_key | $SECRETS_DECODE > "$SECRETS_PATH/$file_path"
            saved=$((saved + 1))
        fi
    done
    echo "saved $saved secrets" | indent
fi
